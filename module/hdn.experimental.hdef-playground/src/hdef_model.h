#pragma once
#include "hdef.h"

// This file could be autogenerated
namespace hdn
{
	static constexpr const char* VERSION_KEY = "version";
	static constexpr const char* VERTICES_KEY = "vertices";

	struct hdef_model
	{
		hdef_model(vector<byte>& payload)
			: def{ payload }
		{
		}

		int get_version()
		{
			const byte* data = def.get(VERSION_KEY);
			return *reinterpret_cast<const int*>(data);
		}

		const byte* get_vertices()
		{
			const byte* data = def.get(VERTICES_KEY);
			return reinterpret_cast<const byte*>(data);
		}

		hdef def;
	};

	struct hdef_model_builder
	{
		void set_version(int version)
		{
			builder.add_int(VERSION_KEY, version);
		}

		void set_vertices(byte* vertices, u64 size)
		{
			builder.add_payload(VERTICES_KEY, vertices, size);
		}

		hdef_builder builder;
	};

}