// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PREFAB_HDN_H_
#define FLATBUFFERS_GENERATED_PREFAB_HDN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "meta_generated.h"
#include "prefab_component_generated.h"

namespace hdn {

struct Entity;
struct EntityBuilder;

struct PrefabAsset;
struct PrefabAssetBuilder;

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_COMPONENTS = 8,
    VT_CHILDREN = 10
  };
  const hdn::uuid *id() const {
    return GetStruct<const hdn::uuid *>(VT_ID);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Component>> *components() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Component>> *>(VT_COMPONENTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>> *>(VT_CHILDREN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<hdn::uuid>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_COMPONENTS) &&
           verifier.VerifyVector(components()) &&
           verifier.VerifyVectorOfTables(components()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(const hdn::uuid *id) {
    fbb_.AddStruct(Entity::VT_ID, id);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_components(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Component>>> components) {
    fbb_.AddOffset(Entity::VT_COMPONENTS, components);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>>> children) {
    fbb_.AddOffset(Entity::VT_CHILDREN, children);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const hdn::uuid *id = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Component>>> components = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>>> children = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_components(components);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const hdn::uuid *id = nullptr,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<hdn::Component>> *components = nullptr,
    const std::vector<::flatbuffers::Offset<hdn::Entity>> *children = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto components__ = components ? _fbb.CreateVector<::flatbuffers::Offset<hdn::Component>>(*components) : 0;
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<hdn::Entity>>(*children) : 0;
  return hdn::CreateEntity(
      _fbb,
      id,
      name__,
      components__,
      children__);
}

struct PrefabAsset FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PrefabAssetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_META = 6,
    VT_NAME = 8,
    VT_ENTITIES = 10
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const hdn::Metadata *meta() const {
    return GetPointer<const hdn::Metadata *>(VT_META);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_META) &&
           verifier.VerifyTable(meta()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct PrefabAssetBuilder {
  typedef PrefabAsset Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(PrefabAsset::VT_ID, id, 0);
  }
  void add_meta(::flatbuffers::Offset<hdn::Metadata> meta) {
    fbb_.AddOffset(PrefabAsset::VT_META, meta);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(PrefabAsset::VT_NAME, name);
  }
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>>> entities) {
    fbb_.AddOffset(PrefabAsset::VT_ENTITIES, entities);
  }
  explicit PrefabAssetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PrefabAsset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PrefabAsset>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PrefabAsset> CreatePrefabAsset(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<hdn::Metadata> meta = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::Entity>>> entities = 0) {
  PrefabAssetBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_entities(entities);
  builder_.add_name(name);
  builder_.add_meta(meta);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PrefabAsset> CreatePrefabAssetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<hdn::Metadata> meta = 0,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<hdn::Entity>> *entities = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<hdn::Entity>>(*entities) : 0;
  return hdn::CreatePrefabAsset(
      _fbb,
      id,
      meta,
      name__,
      entities__);
}

inline const hdn::PrefabAsset *GetPrefabAsset(const void *buf) {
  return ::flatbuffers::GetRoot<hdn::PrefabAsset>(buf);
}

inline const hdn::PrefabAsset *GetSizePrefixedPrefabAsset(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<hdn::PrefabAsset>(buf);
}

inline bool VerifyPrefabAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hdn::PrefabAsset>(nullptr);
}

inline bool VerifySizePrefixedPrefabAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hdn::PrefabAsset>(nullptr);
}

inline void FinishPrefabAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hdn::PrefabAsset> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPrefabAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hdn::PrefabAsset> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hdn

#endif  // FLATBUFFERS_GENERATED_PREFAB_HDN_H_
