// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_META_HDN_H_
#define FLATBUFFERS_GENERATED_META_HDN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace hdn {

struct FileDependency;
struct FileDependencyBuilder;

struct ObjectDependency;
struct ObjectDependencyBuilder;

struct Metadata;
struct MetadataBuilder;

struct FileDependency FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FileDependencyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH_HASH = 4,
    VT_LAST_MODIFIED_TIMESTAMP = 6
  };
  uint64_t path_hash() const {
    return GetField<uint64_t>(VT_PATH_HASH, 0);
  }
  uint64_t last_modified_timestamp() const {
    return GetField<uint64_t>(VT_LAST_MODIFIED_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PATH_HASH, 8) &&
           VerifyField<uint64_t>(verifier, VT_LAST_MODIFIED_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct FileDependencyBuilder {
  typedef FileDependency Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_path_hash(uint64_t path_hash) {
    fbb_.AddElement<uint64_t>(FileDependency::VT_PATH_HASH, path_hash, 0);
  }
  void add_last_modified_timestamp(uint64_t last_modified_timestamp) {
    fbb_.AddElement<uint64_t>(FileDependency::VT_LAST_MODIFIED_TIMESTAMP, last_modified_timestamp, 0);
  }
  explicit FileDependencyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FileDependency> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FileDependency>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FileDependency> CreateFileDependency(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t path_hash = 0,
    uint64_t last_modified_timestamp = 0) {
  FileDependencyBuilder builder_(_fbb);
  builder_.add_last_modified_timestamp(last_modified_timestamp);
  builder_.add_path_hash(path_hash);
  return builder_.Finish();
}

struct ObjectDependency FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectDependencyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4
  };
  uint64_t object_id() const {
    return GetField<uint64_t>(VT_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_ID, 8) &&
           verifier.EndTable();
  }
};

struct ObjectDependencyBuilder {
  typedef ObjectDependency Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint64_t object_id) {
    fbb_.AddElement<uint64_t>(ObjectDependency::VT_OBJECT_ID, object_id, 0);
  }
  explicit ObjectDependencyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectDependency> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectDependency>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectDependency> CreateObjectDependency(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t object_id = 0) {
  ObjectDependencyBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

struct Metadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILE_DEPENDENCIES = 4,
    VT_CODE_VERSION = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FileDependency>> *file_dependencies() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FileDependency>> *>(VT_FILE_DEPENDENCIES);
  }
  uint64_t code_version() const {
    return GetField<uint64_t>(VT_CODE_VERSION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILE_DEPENDENCIES) &&
           verifier.VerifyVector(file_dependencies()) &&
           verifier.VerifyVectorOfTables(file_dependencies()) &&
           VerifyField<uint64_t>(verifier, VT_CODE_VERSION, 8) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_file_dependencies(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FileDependency>>> file_dependencies) {
    fbb_.AddOffset(Metadata::VT_FILE_DEPENDENCIES, file_dependencies);
  }
  void add_code_version(uint64_t code_version) {
    fbb_.AddElement<uint64_t>(Metadata::VT_CODE_VERSION, code_version, 0);
  }
  explicit MetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Metadata> CreateMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FileDependency>>> file_dependencies = 0,
    uint64_t code_version = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_code_version(code_version);
  builder_.add_file_dependencies(file_dependencies);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Metadata> CreateMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<hdn::FileDependency>> *file_dependencies = nullptr,
    uint64_t code_version = 0) {
  auto file_dependencies__ = file_dependencies ? _fbb.CreateVector<::flatbuffers::Offset<hdn::FileDependency>>(*file_dependencies) : 0;
  return hdn::CreateMetadata(
      _fbb,
      file_dependencies__,
      code_version);
}

}  // namespace hdn

#endif  // FLATBUFFERS_GENERATED_META_HDN_H_
