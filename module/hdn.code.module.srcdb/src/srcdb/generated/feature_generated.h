// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEATURE_HDN_H_
#define FLATBUFFERS_GENERATED_FEATURE_HDN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "core_generated.h"
#include "meta_generated.h"

namespace hdn {

struct FeatureZoneEntry;
struct FeatureZoneEntryBuilder;

struct FeatureZone;
struct FeatureZoneBuilder;

struct FeatureAsset;
struct FeatureAssetBuilder;

struct FeatureZoneEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FeatureZoneEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASSET_NAME = 4,
    VT_ASSET_TYPE = 6
  };
  const ::flatbuffers::String *asset_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSET_NAME);
  }
  hdn::AssetType asset_type() const {
    return static_cast<hdn::AssetType>(GetField<uint32_t>(VT_ASSET_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ASSET_NAME) &&
           verifier.VerifyString(asset_name()) &&
           VerifyField<uint32_t>(verifier, VT_ASSET_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct FeatureZoneEntryBuilder {
  typedef FeatureZoneEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_asset_name(::flatbuffers::Offset<::flatbuffers::String> asset_name) {
    fbb_.AddOffset(FeatureZoneEntry::VT_ASSET_NAME, asset_name);
  }
  void add_asset_type(hdn::AssetType asset_type) {
    fbb_.AddElement<uint32_t>(FeatureZoneEntry::VT_ASSET_TYPE, static_cast<uint32_t>(asset_type), 0);
  }
  explicit FeatureZoneEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FeatureZoneEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FeatureZoneEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FeatureZoneEntry> CreateFeatureZoneEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> asset_name = 0,
    hdn::AssetType asset_type = hdn::AssetType_buildconfig) {
  FeatureZoneEntryBuilder builder_(_fbb);
  builder_.add_asset_type(asset_type);
  builder_.add_asset_name(asset_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FeatureZoneEntry> CreateFeatureZoneEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *asset_name = nullptr,
    hdn::AssetType asset_type = hdn::AssetType_buildconfig) {
  auto asset_name__ = asset_name ? _fbb.CreateString(asset_name) : 0;
  return hdn::CreateFeatureZoneEntry(
      _fbb,
      asset_name__,
      asset_type);
}

struct FeatureZone FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FeatureZoneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALIAS_ASSET = 4,
    VT_ASSET_ENTRIES = 6
  };
  const ::flatbuffers::String *alias_asset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALIAS_ASSET);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZoneEntry>> *asset_entries() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZoneEntry>> *>(VT_ASSET_ENTRIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ALIAS_ASSET) &&
           verifier.VerifyString(alias_asset()) &&
           VerifyOffset(verifier, VT_ASSET_ENTRIES) &&
           verifier.VerifyVector(asset_entries()) &&
           verifier.VerifyVectorOfTables(asset_entries()) &&
           verifier.EndTable();
  }
};

struct FeatureZoneBuilder {
  typedef FeatureZone Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_alias_asset(::flatbuffers::Offset<::flatbuffers::String> alias_asset) {
    fbb_.AddOffset(FeatureZone::VT_ALIAS_ASSET, alias_asset);
  }
  void add_asset_entries(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZoneEntry>>> asset_entries) {
    fbb_.AddOffset(FeatureZone::VT_ASSET_ENTRIES, asset_entries);
  }
  explicit FeatureZoneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FeatureZone> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FeatureZone>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FeatureZone> CreateFeatureZone(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> alias_asset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZoneEntry>>> asset_entries = 0) {
  FeatureZoneBuilder builder_(_fbb);
  builder_.add_asset_entries(asset_entries);
  builder_.add_alias_asset(alias_asset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FeatureZone> CreateFeatureZoneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *alias_asset = nullptr,
    const std::vector<::flatbuffers::Offset<hdn::FeatureZoneEntry>> *asset_entries = nullptr) {
  auto alias_asset__ = alias_asset ? _fbb.CreateString(alias_asset) : 0;
  auto asset_entries__ = asset_entries ? _fbb.CreateVector<::flatbuffers::Offset<hdn::FeatureZoneEntry>>(*asset_entries) : 0;
  return hdn::CreateFeatureZone(
      _fbb,
      alias_asset__,
      asset_entries__);
}

struct FeatureAsset FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FeatureAssetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_META = 6,
    VT_NAME = 8,
    VT_FEATURE_ASSETS = 10,
    VT_ZONES = 12
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const hdn::Metadata *meta() const {
    return GetPointer<const hdn::Metadata *>(VT_META);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *feature_assets() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FEATURE_ASSETS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZone>> *zones() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZone>> *>(VT_ZONES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_META) &&
           verifier.VerifyTable(meta()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FEATURE_ASSETS) &&
           verifier.VerifyVector(feature_assets()) &&
           verifier.VerifyVectorOfStrings(feature_assets()) &&
           VerifyOffset(verifier, VT_ZONES) &&
           verifier.VerifyVector(zones()) &&
           verifier.VerifyVectorOfTables(zones()) &&
           verifier.EndTable();
  }
};

struct FeatureAssetBuilder {
  typedef FeatureAsset Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(FeatureAsset::VT_ID, id, 0);
  }
  void add_meta(::flatbuffers::Offset<hdn::Metadata> meta) {
    fbb_.AddOffset(FeatureAsset::VT_META, meta);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FeatureAsset::VT_NAME, name);
  }
  void add_feature_assets(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> feature_assets) {
    fbb_.AddOffset(FeatureAsset::VT_FEATURE_ASSETS, feature_assets);
  }
  void add_zones(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZone>>> zones) {
    fbb_.AddOffset(FeatureAsset::VT_ZONES, zones);
  }
  explicit FeatureAssetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FeatureAsset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FeatureAsset>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FeatureAsset> CreateFeatureAsset(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<hdn::Metadata> meta = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> feature_assets = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<hdn::FeatureZone>>> zones = 0) {
  FeatureAssetBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_zones(zones);
  builder_.add_feature_assets(feature_assets);
  builder_.add_name(name);
  builder_.add_meta(meta);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FeatureAsset> CreateFeatureAssetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<hdn::Metadata> meta = 0,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *feature_assets = nullptr,
    const std::vector<::flatbuffers::Offset<hdn::FeatureZone>> *zones = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto feature_assets__ = feature_assets ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*feature_assets) : 0;
  auto zones__ = zones ? _fbb.CreateVector<::flatbuffers::Offset<hdn::FeatureZone>>(*zones) : 0;
  return hdn::CreateFeatureAsset(
      _fbb,
      id,
      meta,
      name__,
      feature_assets__,
      zones__);
}

inline const hdn::FeatureAsset *GetFeatureAsset(const void *buf) {
  return ::flatbuffers::GetRoot<hdn::FeatureAsset>(buf);
}

inline const hdn::FeatureAsset *GetSizePrefixedFeatureAsset(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<hdn::FeatureAsset>(buf);
}

inline bool VerifyFeatureAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hdn::FeatureAsset>(nullptr);
}

inline bool VerifySizePrefixedFeatureAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hdn::FeatureAsset>(nullptr);
}

inline void FinishFeatureAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hdn::FeatureAsset> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeatureAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hdn::FeatureAsset> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hdn

#endif  // FLATBUFFERS_GENERATED_FEATURE_HDN_H_
