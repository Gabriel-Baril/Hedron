// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENECONFIG_HEDRON_DEFINITION_H_
#define FLATBUFFERS_GENERATED_SCENECONFIG_HEDRON_DEFINITION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "LightConfig_generated.h"

namespace Hedron {
namespace Definition {

struct SceneConfig;
struct SceneConfigBuilder;

struct SceneConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GENERATE_PROXY_GEO = 4,
    VT_LIGHT_CONFIG = 6
  };
  bool generate_proxy_geo() const {
    return GetField<uint8_t>(VT_GENERATE_PROXY_GEO, 0) != 0;
  }
  const Hedron::Definition::LightConfig *light_config() const {
    return GetPointer<const Hedron::Definition::LightConfig *>(VT_LIGHT_CONFIG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GENERATE_PROXY_GEO, 1) &&
           VerifyOffset(verifier, VT_LIGHT_CONFIG) &&
           verifier.VerifyTable(light_config()) &&
           verifier.EndTable();
  }
};

struct SceneConfigBuilder {
  typedef SceneConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_generate_proxy_geo(bool generate_proxy_geo) {
    fbb_.AddElement<uint8_t>(SceneConfig::VT_GENERATE_PROXY_GEO, static_cast<uint8_t>(generate_proxy_geo), 0);
  }
  void add_light_config(::flatbuffers::Offset<Hedron::Definition::LightConfig> light_config) {
    fbb_.AddOffset(SceneConfig::VT_LIGHT_CONFIG, light_config);
  }
  explicit SceneConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneConfig> CreateSceneConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool generate_proxy_geo = false,
    ::flatbuffers::Offset<Hedron::Definition::LightConfig> light_config = 0) {
  SceneConfigBuilder builder_(_fbb);
  builder_.add_light_config(light_config);
  builder_.add_generate_proxy_geo(generate_proxy_geo);
  return builder_.Finish();
}

inline const Hedron::Definition::SceneConfig *GetSceneConfig(const void *buf) {
  return ::flatbuffers::GetRoot<Hedron::Definition::SceneConfig>(buf);
}

inline const Hedron::Definition::SceneConfig *GetSizePrefixedSceneConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Hedron::Definition::SceneConfig>(buf);
}

inline bool VerifySceneConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Hedron::Definition::SceneConfig>(nullptr);
}

inline bool VerifySizePrefixedSceneConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Hedron::Definition::SceneConfig>(nullptr);
}

inline void FinishSceneConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hedron::Definition::SceneConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hedron::Definition::SceneConfig> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Definition
}  // namespace Hedron

#endif  // FLATBUFFERS_GENERATED_SCENECONFIG_HEDRON_DEFINITION_H_
