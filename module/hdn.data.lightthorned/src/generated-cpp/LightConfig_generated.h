// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIGHTCONFIG_HEDRON_DEFINITION_H_
#define FLATBUFFERS_GENERATED_LIGHTCONFIG_HEDRON_DEFINITION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Hedron {
namespace Definition {

struct LightConfig;
struct LightConfigBuilder;

struct LightConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LightConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAX_PRIMARY_LIGHT = 4,
    VT_MAX_PROBES = 6
  };
  uint16_t max_primary_light() const {
    return GetField<uint16_t>(VT_MAX_PRIMARY_LIGHT, 0);
  }
  uint16_t max_probes() const {
    return GetField<uint16_t>(VT_MAX_PROBES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_MAX_PRIMARY_LIGHT, 2) &&
           VerifyField<uint16_t>(verifier, VT_MAX_PROBES, 2) &&
           verifier.EndTable();
  }
};

struct LightConfigBuilder {
  typedef LightConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_max_primary_light(uint16_t max_primary_light) {
    fbb_.AddElement<uint16_t>(LightConfig::VT_MAX_PRIMARY_LIGHT, max_primary_light, 0);
  }
  void add_max_probes(uint16_t max_probes) {
    fbb_.AddElement<uint16_t>(LightConfig::VT_MAX_PROBES, max_probes, 0);
  }
  explicit LightConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LightConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LightConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LightConfig> CreateLightConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t max_primary_light = 0,
    uint16_t max_probes = 0) {
  LightConfigBuilder builder_(_fbb);
  builder_.add_max_probes(max_probes);
  builder_.add_max_primary_light(max_primary_light);
  return builder_.Finish();
}

inline const Hedron::Definition::LightConfig *GetLightConfig(const void *buf) {
  return ::flatbuffers::GetRoot<Hedron::Definition::LightConfig>(buf);
}

inline const Hedron::Definition::LightConfig *GetSizePrefixedLightConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Hedron::Definition::LightConfig>(buf);
}

inline bool VerifyLightConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Hedron::Definition::LightConfig>(nullptr);
}

inline bool VerifySizePrefixedLightConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Hedron::Definition::LightConfig>(nullptr);
}

inline void FinishLightConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hedron::Definition::LightConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLightConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hedron::Definition::LightConfig> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Definition
}  // namespace Hedron

#endif  // FLATBUFFERS_GENERATED_LIGHTCONFIG_HEDRON_DEFINITION_H_
